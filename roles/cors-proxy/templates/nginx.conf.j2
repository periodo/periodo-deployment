server {
    listen              443 ssl http2;
    listen              [::]:443 ssl http2;
    server_name         {{ server_name }};
    ssl_certificate     {{ https_chain }};
    ssl_certificate_key {{ https_key }};
    ssl_dhparam         {{ https_dhparams }};

    ssl_session_timeout 1d;
    ssl_session_cache   shared:SSL:10m;  # about 40000 sessions
    ssl_session_tickets off;

    # only use modern, secure protocols and cipher suites
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    charset             utf-8;

    # max upload size
    client_max_body_size 75M;   # adjust to taste

    if ($host !~* ^{{ server_name }}$ ) {
        return 444;
    }
    if ($http_origin !~* ^https://{{ origin_domains }}$) {
        return 444;
    }

    gzip on;
    gzip_types	text/turtle application/json application/ld+json;
    gzip_vary on;

    resolver 127.0.0.1;

    merge_slashes off;

    location ~* ^/(?<upstream>https?://{{ proxy_domains }})(?<path>/.*)$ {
        proxy_hide_header Access-Control-Allow-Origin;
        add_header Access-Control-Allow-Origin $http_origin always;
        proxy_set_header Host $proxy_host;

        # temporary workaround for broken SSL config on pub.orcid.org
        proxy_redirect
          ~*^https://pub.orcid.org(?<path>.*)$
          https://{{ server_name }}/https://orcid.org$path;

        proxy_redirect ~*^(?<url>.*)$ https://{{ server_name }}/$url;
        proxy_pass $upstream$path;
    }
}
