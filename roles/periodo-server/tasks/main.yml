---
- name: Install apt packages
  apt:
    name: "{{ system_packages }}"

- name: Create directory for app
  file:
    path: "{{ install_root }}"
    state: directory

- name: Create directory for WWW files
  file:
    path: "{{ www_root }}"
    state: directory
    owner: www-data

- name: Create client temp directory
  file:
    path: "{{ www_root }}/client_temp"
    state: directory
    owner: www-data

- name: Create server temp directory
  file:
    path: "{{ www_root }}/server_temp"
    state: directory
    owner: www-data

- name: Create client packages directory
  file:
    path: "{{ www_root }}/client_packages"
    state: directory
    owner: www-data
    mode: 'g+rwx'

- name: Clone/pull project repo
  git:
    repo: "{{ project_repo }}"
    dest: "{{ install_root }}"
    version: "{{ project_repo_version }}"
  notify:
  - Restart uwsgi app service

- name: Remove existing venv
  file:
    path: "{{ install_root }}/venv"
    state: absent

- name: Install python packages
  pip:
    requirements: "{{ install_root }}/requirements.txt"
    virtualenv: "{{ install_root }}/venv"
    virtualenv_command: "{{ python3_executable }} -m venv"
  notify:
  - Restart uwsgi app service

- name: Copy secrets file
  template:
    src: files/secrets.py
    dest: "{{ install_root }}/periodo/secrets.py"

- name: Upload PeriodO export file to be imported
  copy:
    src: "{{ import_file }}"
    dest: "{{ install_root }}/export.sql.gz"
  when: import_file is defined

- name: Remove old export file
  file:
    state: absent
    path: "{{ install_root }}/export.sql.gz"
  when: import_url is defined

- name: Import PeriodO export file
  make:
    chdir: "{{ install_root }}"
    target: import
    params:
      DB: "{{ db_path }}"
      IMPORT_URL: "{{ import_url | default('') }}"
  when: (import_file is defined) or (import_url is defined)

- name: Ensure vocabulary is regenerated
  file:
    state: absent
    path: "{{ install_root }}/vocab.ttl"

- name: Install highlight theme
  copy:
    src: "{{ install_root }}/periodo.theme"
    dest: "/usr/share/highlight/themes/periodo.theme.theme"
    remote_src: yes
  when: project_repo_version != 'pre-renaming'

- name: Create vocabulary files and update DB schema
  make:
    chdir: "{{ install_root }}"
    target: all
    params:
      DB: "{{ db_path }}"

- name: Move vocabulary file to web root
  copy:
    src: "{{ install_root }}/vocab.ttl"
    dest: "{{ www_root }}/vocab.ttl"
    remote_src: yes
  when: project_repo_version != 'pre-renaming'

- name: Move vocabulary HTML file to web root
  copy:
    src: "{{ install_root }}/vocab.html"
    dest: "{{ www_root }}/vocab.html"
    remote_src: yes
  when: project_repo_version != 'pre-renaming'

- name: Move CSV query file to web root
  copy:
    src: "{{ install_root }}/periods-as-csv.rq"
    dest: "{{ www_root }}/periods-as-csv.rq"
    remote_src: yes
  when: project_repo_version != 'pre-renaming'

- name: Move CSS styles for syntax highlighting to web root
  copy:
    src: "{{ install_root }}/highlight-style.css"
    dest: "{{ www_root }}/highlight-style.css"
    remote_src: yes
  when: project_repo_version != 'pre-renaming'

- name: Make DB file writable by web server
  file:
    path: "{{ db_path }}"
    state: file
    owner: www-data
    mode: u=rwx,g=rx,o=rx

- name: Upload initial data to be loaded
  copy:
    src: "{{ initial_data }}"
    dest: "{{ install_root }}/initial-data.json"
  when: initial_data is defined

- name: Load initial data
  make:
    chdir: "{{ install_root }}"
    target: load_data
    params:
      DB: "{{ db_path }}"
      DATA: "{{ install_root }}/initial-data.json"
  when: initial_data is defined

- name: Grant admin permissions
  make:
    chdir: "{{ install_root }}"
    target: set_permissions
    params:
      DB: "{{ db_path }}"
      ORCID: "{{ admin_orcid }}"
      PERMISSIONS: "{{ admin_permissions }}"

- name: Install uwsgi app socket
  template:
    src: templates/uwsgi-app.socket.j2
    dest: "/etc/systemd/system/{{ server_name }}.socket"
  register: installed_socket
  notify:
  - Restart uwsgi app socket
  - Restart uwsgi app service

- name: Install uwsgi app service
  template:
    src: templates/uwsgi-app.service.j2
    dest: "/etc/systemd/system/{{ server_name }}.service"
  register: installed_service
  notify:
  - Restart uwsgi app service

- name: Tell systemd to reload configs
  systemd: daemon_reload=yes
  when: installed_socket is changed or installed_service is changed

- name: Copy uwsgi config
  template:
    src: templates/uwsgi.ini.j2
    dest: "{{ uwsgi_conf_dir }}{{ server_name }}.ini"
    owner: www-data
    group: www-data
  notify:
  - Restart uwsgi app service

- name: Purge nginx cache
  file:
    path: "{{ cache_path }}"
    state: absent

- name: Create fresh nginx cache
  file:
    path: "{{ cache_path }}"
    state: directory
    owner: www-data
  notify:
  - Restart nginx

- name: Copy nginx config
  template:
    src: templates/nginx.conf.j2
    dest: "{{ nginx_conf_dir }}{{ server_name }}.conf"
  notify:
  - Restart nginx

- name: Ensure uwsgi app socket is running
  systemd:
    name: "{{ server_name }}.socket"
    enabled: yes
    state: started

- name: Ensure uwsgi app service is enabled
  systemd:
    name: "{{ server_name }}.service"
    enabled: yes

- name: Ensure nginx is running
  systemd:
    name: nginx.service
    enabled: yes
    state: started
